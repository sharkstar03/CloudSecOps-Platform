from sqlalchemy import Column, Integer, String, Float, DateTime, Enum, ForeignKey, Boolean, Text
from sqlalchemy.orm import relationship
import enum
from datetime import datetime
import uuid

from .database import Base

# Enum for Vulnerability Severity
class SeverityLevel(enum.Enum):
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"

# Enum for Cloud Provider
class CloudProvider(enum.Enum):
    AWS = "aws"
    AZURE = "azure"
    GCP = "gcp"
    OTHER = "other"

# Enum for Status
class VulnerabilityStatus(enum.Enum):
    OPEN = "open"
    IN_PROGRESS = "in_progress"
    RESOLVED = "resolved"
    ACCEPTED_RISK = "accepted_risk"
    FALSE_POSITIVE = "false_positive"

# Vulnerability Model
class Vulnerability(Base):
    __tablename__ = "vulnerabilities"

    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    title = Column(String(255), nullable=False)
    description = Column(Text, nullable=False)
    resource_id = Column(String(255), nullable=False)
    resource_type = Column(String(100), nullable=False)
    cloud_provider = Column(Enum(CloudProvider), nullable=False)
    region = Column(String(50))
    severity = Column(Enum(SeverityLevel), nullable=False)
    status = Column(Enum(VulnerabilityStatus), default=VulnerabilityStatus.OPEN)
    
    # CVSS scoring
    cvss_score = Column(Float)
    cvss_vector = Column(String(255))
    
    # Remediation
    remediation_steps = Column(Text)
    
    # Timestamps
    detected_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    resolved_at = Column(DateTime, nullable=True)
    
    # Relationships
    compliance_findings = relationship("ComplianceFinding", back_populates="vulnerability")
    
    def __repr__(self):
        return f"<Vulnerability(id='{self.id}', title='{self.title}', severity={self.severity}, status={self.status})>"

# Compliance Finding Model
class ComplianceFinding(Base):
    __tablename__ = "compliance_findings"
    
    id = Column(String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    vulnerability_id = Column(String(36), ForeignKey("vulnerabilities.id"))
    standard = Column(String(50), nullable=False)  # e.g., "CIS", "NIST", "PCI DSS"
    control_id = Column(String(50), nullable=False)  # e.g., "CIS 1.1"
    description = Column(Text, nullable=False)
    is_compliant = Column(Boolean, default=False)
    evidence = Column(Text)
    
    # Relationship
    vulnerability = relationship("Vulnerability", back_populates="compliance_findings")
    
    def __repr__(self):
        return f"<ComplianceFinding(id='{self.id}', standard='{self.standard}', control_id='{self.control_id}', is_compliant={self.is_compliant})>"